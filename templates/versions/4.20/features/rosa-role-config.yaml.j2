---
# ROSARoleConfig Template for ACM-21162
# Automates AWS IAM role creation for ROSA HCP clusters
# Eliminates manual role setup requirements

apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: ROSARoleConfig
metadata:
  name: {{ rosa_role_config_name | default(cluster_name + "-roles") }}
  namespace: {{ capi_namespace | default("ns-rosa-hcp") }}
  labels:
    cluster.x-k8s.io/cluster-name: {{ cluster_name }}
    automation.acm.redhat.com/test-case: "ACM-21162"
    automation.acm.redhat.com/created-by: "ansible-automation"
    {% if additional_labels is defined %}
    {% for key, value in additional_labels.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
  annotations:
    automation.acm.redhat.com/description: "Automated ROSARoleConfig for {{ cluster_name }}"
    automation.acm.redhat.com/timestamp: "{{ ansible_date_time.iso8601 }}"
    automation.acm.redhat.com/version: "{{ openshift_version | default('4.20') }}"
    {% if additional_annotations is defined %}
    {% for key, value in additional_annotations.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
spec:
  # AWS Account Configuration
  awsAccountId: "{{ aws_account_id }}"

  # AWS Region Configuration
  region: {{ aws_region | default("us-east-1") | quote }}

  # Role Configuration
  roles:
    # Installer Role
    - name: "{{ installer_role_name | default(cluster_name + '-installer-role') }}"
      type: "installer"
      description: "ROSA HCP installer role for {{ cluster_name }}"
      assumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::{{ rosa_service_account_id | default('710019948333') }}:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "{{ external_id | default('') }}"
                }
              }
            }
          ]
        }
      managedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/ROSAInstallerPolicy"
        {% if custom_installer_policies is defined %}
        {% for policy in custom_installer_policies %}
        - "{{ policy }}"
        {% endfor %}
        {% endif %}
      {% if inline_installer_policies is defined %}
      inlinePolicies:
        {% for policy_name, policy_doc in inline_installer_policies.items() %}
        - name: "{{ policy_name }}"
          document: |
{{ policy_doc | indent(12, True) }}
        {% endfor %}
      {% endif %}

    # Support Role
    - name: "{{ support_role_name | default(cluster_name + '-support-role') }}"
      type: "support"
      description: "ROSA HCP support role for {{ cluster_name }}"
      assumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::{{ rosa_service_account_id | default('710019948333') }}:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "{{ external_id | default('') }}"
                }
              }
            }
          ]
        }
      managedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/ROSASupportPolicy"
        {% if custom_support_policies is defined %}
        {% for policy in custom_support_policies %}
        - "{{ policy }}"
        {% endfor %}
        {% endif %}
      {% if inline_support_policies is defined %}
      inlinePolicies:
        {% for policy_name, policy_doc in inline_support_policies.items() %}
        - name: "{{ policy_name }}"
          document: |
{{ policy_doc | indent(12, True) }}
        {% endfor %}
      {% endif %}

    # Worker Role
    - name: "{{ worker_role_name | default(cluster_name + '-worker-role') }}"
      type: "worker"
      description: "ROSA HCP worker role for {{ cluster_name }}"
      assumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      managedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        {% if custom_worker_policies is defined %}
        {% for policy in custom_worker_policies %}
        - "{{ policy }}"
        {% endfor %}
        {% endif %}
      {% if inline_worker_policies is defined %}
      inlinePolicies:
        {% for policy_name, policy_doc in inline_worker_policies.items() %}
        - name: "{{ policy_name }}"
          document: |
{{ policy_doc | indent(12, True) }}
        {% endfor %}
      {% endif %}

  # OIDC Provider Configuration
  {% if create_oidc_provider | default(true) %}
  oidcProvider:
    issuerUrl: "{{ oidc_issuer_url | default('https://oidc.eks.' + aws_region + '.amazonaws.com/id/' + cluster_name) }}"
    thumbprints:
      {% if oidc_thumbprints is defined %}
      {% for thumbprint in oidc_thumbprints %}
      - "{{ thumbprint }}"
      {% endfor %}
      {% else %}
      - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
      - "a9d53002e97e00e043244f3d170d6f4c414104fd"
      {% endif %}
    clientIds:
      - "sts.amazonaws.com"
      {% if additional_client_ids is defined %}
      {% for client_id in additional_client_ids %}
      - "{{ client_id }}"
      {% endfor %}
      {% endif %}
  {% endif %}

  # Credential Request Configuration
  credentialRequests:
    # Cloud Controller Manager
    - name: "{{ cluster_name }}-cloud-controller-manager"
      namespace: "kube-system"
      serviceAccount: "cloud-controller-manager"
      secretName: "cloud-controller-manager-credentials"
      policyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeInstances",
                "ec2:DescribeRouteTables",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVolumes",
                "ec2:DescribeVpcs",
                "ec2:DescribeLoadBalancers",
                "ec2:DescribeTargetGroups",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeTargetGroups"
              ],
              "Resource": "*"
            }
          ]
        }

    # Node Manager
    - name: "{{ cluster_name }}-node-manager"
      namespace: "kube-system"
      serviceAccount: "node-manager"
      secretName: "node-manager-credentials"
      policyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceTypes",
                "ec2:DescribeAvailabilityZones"
              ],
              "Resource": "*"
            }
          ]
        }

    {% if additional_credential_requests is defined %}
    {% for cr in additional_credential_requests %}
    - name: "{{ cr.name }}"
      namespace: "{{ cr.namespace }}"
      serviceAccount: "{{ cr.service_account }}"
      secretName: "{{ cr.secret_name }}"
      policyDocument: |
{{ cr.policy_document | indent(8, True) }}
    {% endfor %}
    {% endif %}

  # Optional Configuration
  {% if role_path is defined %}
  rolePath: "{{ role_path }}"
  {% endif %}

  {% if permission_boundary is defined %}
  permissionBoundary: "{{ permission_boundary }}"
  {% endif %}

  {% if enable_deletion_protection | default(false) %}
  deletionProtection: true
  {% endif %}

  # Tags for AWS Resources
  tags:
    Environment: "{{ environment | default('test') }}"
    Project: "ACM-CAPI-Automation"
    TestCase: "ACM-21162"
    ClusterName: "{{ cluster_name }}"
    CreatedBy: "ansible-automation"
    OpenShiftVersion: "{{ openshift_version | default('4.20') }}"
    {% if additional_tags is defined %}
    {% for key, value in additional_tags.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}