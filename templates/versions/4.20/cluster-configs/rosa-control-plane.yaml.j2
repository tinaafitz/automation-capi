apiVersion: controlplane.cluster.x-k8s.io/v1beta2
kind: ROSAControlPlane
metadata:
  name: "{{ cluster_name }}"
  namespace: "{{ capi_namespace }}"
  labels:
    cluster.x-k8s.io/cluster-name: "{{ cluster_name }}"
    openshift-version: "{{ openshift_version }}"
spec:
  # OpenShift 4.20 - Premium Configuration
  version: "{{ openshift_version | default('4.20.0') }}"
  
  # Advanced networking configuration for 4.20
  network:
    machineCIDR: "{{ machine_cidr | default('10.0.0.0/16') }}"
    podCIDR: "{{ pod_cidr | default('10.128.0.0/14') }}"
    serviceCIDR: "{{ service_cidr | default('172.30.0.0/16') }}"
    hostPrefix: {{ host_prefix | default(23) }}
    {% if enable_ipv6_dual_stack | default(false) %}
    networkType: "OVNKubernetes"
    clusterNetwork:
      - cidr: "10.128.0.0/14"
        hostPrefix: 23
      - cidr: "fd01::/48"
        hostPrefix: 64
    serviceNetwork:
      - "172.30.0.0/16"
      - "fd02::/112"
    {% endif %}
    {% if enable_private_cluster | default(false) %}
    type: "Private"
    {% endif %}
  
  # Multi-architecture machine pool configuration (4.20 feature)
  defaultMachinePool:
    instanceType: "{{ instance_type | default('m6i.xlarge') }}"
    {% if enable_arm_instances | default(false) %}
    architecture: "{{ architecture | default('arm64') }}"
    {% endif %}
    replicas: {{ replicas | default(3) }}
    rootVolume:
      size: "{{ custom_disk_size | default(200) }}Gi"
      type: "{{ disk_type | default('gp3') }}"
      iops: {{ disk_iops | default(3000) }}
      throughput: {{ disk_throughput | default(125) }}
    {% if enable_gpu_instances | default(false) %}
    accelerators:
      - type: "{{ gpu_type | default('nvidia-tesla-v100') }}"
        count: {{ gpu_count | default(1) }}
    {% endif %}
    {% if custom_taints is defined %}
    taints:
      {% for taint in custom_taints %}
      - key: "{{ taint.key }}"
        value: "{{ taint.value }}"
        effect: "{{ taint.effect }}"
      {% endfor %}
    {% endif %}
  
  # Enhanced multi-AZ configuration
  region: "{{ aws_region | default('us-east-1') }}"
  availabilityZones:
    {% for az in availability_zones | default(['a', 'b', 'c']) %}
    - "{{ aws_region | default('us-east-1') }}{{ az }}"
    {% endfor %}
  
  # Zero-trust security configuration (4.20 feature)
  endpointAccess: "{{ endpoint_access | default('Private') }}"
  {% if enable_zero_trust | default(false) %}
  securityProfile:
    type: "ZeroTrust"
    encryption:
      etcd: true
      api: true
    networkPolicies:
      defaultDeny: true
      allowedNetworks:
        {% for network in allowed_networks | default([]) %}
        - "{{ network }}"
        {% endfor %}
  {% endif %}
  
  # Advanced OIDC configuration with multiple providers
  {% if external_oidc_providers is defined %}
  oidcConfig:
    providers:
      {% for provider in external_oidc_providers %}
      - name: "{{ provider.name }}"
        issuerURL: "{{ provider.issuer_url }}"
        clientID: "{{ provider.client_id }}"
        usernameClaim: "{{ provider.username_claim | default('preferred_username') }}"
        groupsClaim: "{{ provider.groups_claim | default('groups') }}"
        {% if provider.ca_certificate is defined %}
        caCertificate: "{{ provider.ca_certificate }}"
        {% endif %}
      {% endfor %}
  {% endif %}
  
  # Service mesh integration (4.20 feature)
  {% if enable_service_mesh | default(false) %}
  serviceMesh:
    type: "{{ service_mesh_type | default('istio') }}"
    version: "{{ service_mesh_version | default('1.18') }}"
    configuration:
      mtls:
        mode: "{{ mtls_mode | default('STRICT') }}"
      telemetry:
        enabled: true
        backend: "{{ telemetry_backend | default('jaeger') }}"
  {% endif %}
  
  # OCM credentials reference
  credentialsSecretRef:
    name: "{{ rosa_creds_secret }}"
    namespace: "{{ capa_system_namespace }}"
  
  # Advanced addon configuration for 4.20
  addons:
    - name: "cluster-logging-operator"
      id: "cluster-logging-operator"
      version: "{{ logging_version | default('latest') }}"
    - name: "cluster-monitoring-operator"
      id: "cluster-monitoring-operator"
      version: "{{ monitoring_version | default('latest') }}"
    {% if enable_advanced_cluster_management | default(false) %}
    - name: "advanced-cluster-management"
      id: "advanced-cluster-management"
    {% endif %}
    {% if enable_cluster_autoscaler | default(false) %}
    - name: "cluster-autoscaler"
      id: "cluster-autoscaler"
      parameters:
        expander: "{{ autoscaler_expander | default('priority') }}"
        scaleDownEnabled: "{{ scale_down_enabled | default(true) }}"
        scaleDownDelayAfterAdd: "{{ scale_down_delay | default('5m') }}"
        scaleDownDelayAfterDelete: "{{ scale_down_delay_delete | default('10s') }}"
        scaleDownDelayAfterFailure: "{{ scale_down_delay_failure | default('3m') }}"
        maxNodeProvisionTime: "{{ max_node_provision_time | default('15m') }}"
    {% endif %}
    {% if enable_external_dns | default(false) %}
    - name: "external-dns-operator"
      id: "external-dns-operator"
    {% endif %}
    {% if enable_cert_manager | default(false) %}
    - name: "cert-manager-operator"
      id: "cert-manager-operator"
    {% endif %}
    {% if enable_ai_workloads | default(false) %}
    - name: "nvidia-gpu-operator"
      id: "nvidia-gpu-operator"
    - name: "node-feature-discovery-operator"
      id: "node-feature-discovery-operator"
    {% endif %}
  
  # Enhanced image registry configuration
  {% if image_registry_config is defined %}
  imageRegistry:
    managementState: "{{ image_registry_config.management_state | default('Managed') }}"
    {% if image_registry_config.storage_type == 's3' %}
    storage:
      s3:
        bucket: "{{ image_registry_config.s3_bucket }}"
        region: "{{ image_registry_config.s3_region | default(aws_region) }}"
        encrypt: {{ image_registry_config.s3_encrypt | default(true) }}
        {% if image_registry_config.s3_kms_key is defined %}
        keyID: "{{ image_registry_config.s3_kms_key }}"
        {% endif %}
    {% endif %}
    {% if image_registry_config.replica_count is defined %}
    replicas: {{ image_registry_config.replica_count }}
    {% endif %}
  {% endif %}
  
  # Edge computing configuration (4.20 feature)
  {% if enable_edge_computing | default(false) %}
  edgeConfiguration:
    nodes:
      minReplicas: {{ edge_min_replicas | default(1) }}
      maxReplicas: {{ edge_max_replicas | default(10) }}
    storage:
      type: "{{ edge_storage_type | default('local') }}"
      size: "{{ edge_storage_size | default('100Gi') }}"
    networking:
      bandwidth: "{{ edge_bandwidth | default('1Gbps') }}"
      latency: "{{ edge_max_latency | default('50ms') }}"
  {% endif %}