---
# ACM-21174 ROSANetwork Comprehensive Testing Playbook
# Tests creation, validation, AWS resource verification, and cleanup
# Covers standalone network automation and combined network + roles scenarios

- name: ACM-21174 ROSANetwork Comprehensive Testing
  hosts: localhost
  gather_facts: true
  vars_files:
    - vars/vars.yml
    - vars/user_vars.yml

  vars:
    test_case: "ACM-21174"
    test_description: "ROSANetwork automated VPC and subnet creation testing"
    test_start_time: "{{ ansible_date_time.iso8601 }}"
    test_cluster_name: "{{ cluster_name | default('acm21174-test-' + ansible_date_time.epoch[-6:]) }}"
    test_results: []

    # Test configuration
    openshift_version: "{{ acm21174_config.openshift_version | default('4.20.0') }}"
    aws_region: "{{ aws_region | default('us-west-2') }}"
    test_timeout: 1800  # 30 minutes

    # ROSANetwork configuration
    rosa_network_config:
      name: "{{ test_cluster_name }}-network"
      availability_zones:
        - "{{ aws_region }}a"
        - "{{ aws_region }}b"
      cidr_block: "10.0.0.0/16"
      tags:
        Environment: "test"
        TestCase: "ACM-21174"
        CreatedBy: "ansible-automation"
        Purpose: "rosanetwork-testing"

    # Cluster configuration for testing
    cluster_config:
      domain_prefix: "rosa-{{ cluster_name_prefix | default('acm21174') }}"
      instance_type: "m5.xlarge"
      min_replicas: 2
      max_replicas: 3
      replicas: 2

  tasks:
    - name: Display test information
      debug:
        msg: |
          ACM-21174 ROSANetwork Testing
          =============================
          Test Case: {{ test_case }}
          Description: {{ test_description }}
          Start Time: {{ test_start_time }}
          Test Cluster: {{ test_cluster_name }}

          Test Configuration:
          - OpenShift Version: {{ openshift_version }}
          - AWS Region: {{ aws_region }}
          - Network CIDR: {{ rosa_network_config.cidr_block }}
          - Availability Zones: {{ rosa_network_config.availability_zones | join(', ') }}

    - name: Initialize test tracking
      set_fact:
        total_tests: 0
        passed_tests: 0
        failed_tests: 0
        test_start_epoch: "{{ ansible_date_time.epoch | int }}"

    - name: Create output directory for test artifacts
      include_tasks: tasks/create_output_folder.yml

    - name: Verify environment prerequisites
      block:
        - name: Test 1 - Verify CAPA network controller is ready
          block:
            - name: Verify CAPA network controller status
              include_tasks: tasks/verify_capa_network_controller.yml

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'CAPA Network Controller Verification', 'status': 'passed', 'time': 45}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'CAPA Network Controller Verification', 'status': 'failed', 'time': 45, 'failure_message': 'CAPA network controller verification failed'}] }}"

        - name: Test 2 - Validate ROSANetwork CRDs are available
          block:
            - name: Check ROSANetwork CRD availability
              kubernetes.core.k8s_info:
                api_version: apiextensions.k8s.io/v1
                kind: CustomResourceDefinition
                name: rosanetworks.infrastructure.cluster.x-k8s.io
              register: rosanetwork_crd_check

            - name: Validate CRD is ready
              assert:
                that:
                  - rosanetwork_crd_check.resources | length > 0
                  - rosanetwork_crd_check.resources[0].status.conditions | selectattr('type', 'equalto', 'Established') | selectattr('status', 'equalto', 'True') | list | length > 0
                fail_msg: "ROSANetwork CRD is not properly installed"
                success_msg: "ROSANetwork CRD is ready"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork CRD Validation', 'status': 'passed', 'time': 15}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork CRD Validation', 'status': 'failed', 'time': 15, 'failure_message': 'ROSANetwork CRD validation failed'}] }}"

    - name: Test ROSANetwork creation and basic functionality
      block:
        - name: Test 3 - Create ROSANetwork
          block:
            - name: Create ROSANetwork for test cluster
              include_tasks: tasks/create_rosa_network.yml
              vars:
                cluster_name: "{{ test_cluster_name }}"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Creation', 'status': 'passed', 'time': 180}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Creation', 'status': 'failed', 'time': 180, 'failure_message': 'ROSANetwork creation failed'}] }}"

        - name: Test 4 - Wait for ROSANetwork to be ready
          block:
            - name: Wait for network infrastructure to be created
              include_tasks: tasks/wait_for_rosa_network.yml
              vars:
                cluster_name: "{{ test_cluster_name }}"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Ready Wait', 'status': 'passed', 'time': 300}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Ready Wait', 'status': 'failed', 'time': 300, 'failure_message': 'ROSANetwork did not become ready in time'}] }}"

        - name: Test 5 - Validate ROSANetwork resource
          block:
            - name: Validate ROSANetwork configuration and status
              include_tasks: tasks/validate_rosa_network.yml
              vars:
                cluster_name: "{{ test_cluster_name }}"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Validation', 'status': 'passed', 'time': 60}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Validation', 'status': 'failed', 'time': 60, 'failure_message': 'ROSANetwork validation failed'}] }}"

    - name: Test AWS resource validation
      block:
        - name: Test 6 - Validate AWS VPC was created
          block:
            - name: Validate AWS VPC was actually created
              include_tasks: tasks/validate_aws_vpc_created.yml
              vars:
                cluster_name: "{{ test_cluster_name }}"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'AWS VPC Validation', 'status': 'passed', 'time': 90}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'AWS VPC Validation', 'status': 'failed', 'time': 90, 'failure_message': 'AWS VPC validation failed'}] }}"

        - name: Test 7 - Validate AWS subnets were created
          block:
            - name: Validate AWS subnets were correctly created
              include_tasks: tasks/validate_aws_subnets_created.yml
              vars:
                cluster_name: "{{ test_cluster_name }}"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'AWS Subnets Validation', 'status': 'passed', 'time': 120}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'AWS Subnets Validation', 'status': 'failed', 'time': 120, 'failure_message': 'AWS subnets validation failed'}] }}"

    - name: Test ROSA cluster integration with ROSANetwork
      block:
        - name: Test 8 - Create ROSA cluster with network reference
          block:
            - name: Generate cluster configuration with ROSANetwork reference
              template:
                src: "{{ template_version_path }}/features/rosa-capi-network-cluster.yaml.j2"
                dest: "{{ output_dir }}/{{ test_cluster_name }}-cluster.yaml"
              vars:
                cluster_name: "{{ test_cluster_name }}"
                domain_prefix: "{{ cluster_config.domain_prefix }}"
                machine_pool:
                  instance_type: "{{ cluster_config.instance_type }}"
                  min_replicas: "{{ cluster_config.min_replicas }}"
                  max_replicas: "{{ cluster_config.max_replicas }}"
                  replicas: "{{ cluster_config.replicas }}"
                  node_pool_name: "{{ test_cluster_name }}-nodepool"

            - name: Apply ROSA cluster configuration
              kubernetes.core.k8s:
                state: present
                src: "{{ output_dir }}/{{ test_cluster_name }}-cluster.yaml"
                wait: true
                wait_timeout: 300
              register: cluster_creation

            - name: Verify network integration in cluster spec
              kubernetes.core.k8s_info:
                api_version: controlplane.cluster.x-k8s.io/v1beta2
                kind: ROSAControlPlane
                name: "{{ test_cluster_name }}"
                namespace: "{{ capi_namespace }}"
              register: controlplane_status

            - name: Validate network reference
              assert:
                that:
                  - controlplane_status.resources[0].spec.rosaNetworkRef is defined
                  - controlplane_status.resources[0].spec.rosaNetworkRef.name == test_cluster_name + "-network"
                  - controlplane_status.resources[0].spec.subnets is not defined or controlplane_status.resources[0].spec.subnets | length == 0
                fail_msg: "ROSANetwork reference not properly set or manual subnets still specified"
                success_msg: "ROSANetwork properly referenced in ROSA cluster"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSA Cluster Network Integration', 'status': 'passed', 'time': 240}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSA Cluster Network Integration', 'status': 'failed', 'time': 240, 'failure_message': 'ROSA cluster network integration failed'}] }}"

    - name: Test comparison with manual approach (optional)
      block:
        - name: Test 9 - Compare manual vs automated network approach
          block:
            - name: Compare automated ROSANetwork with manual VPC setup
              include_tasks: tasks/compare_manual_vs_automated_network.yml
              vars:
                cluster_name: "{{ test_cluster_name }}"
              when: enable_manual_comparison | default(false)

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'Manual vs Automated Network Comparison', 'status': 'passed', 'time': 180}] }}"
              when: enable_manual_comparison | default(false)

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'Manual vs Automated Network Comparison', 'status': 'failed', 'time': 180, 'failure_message': 'Manual vs automated comparison failed'}] }}"
              when: enable_manual_comparison | default(false)

      when: enable_manual_comparison | default(false)

    - name: Test end-to-end cluster creation (optional)
      block:
        - name: Test 10 - Create full ROSA cluster using ROSANetwork
          block:
            - name: Wait for ROSAControlPlane to be ready (limited wait for testing)
              kubernetes.core.k8s_info:
                api_version: controlplane.cluster.x-k8s.io/v1beta2
                kind: ROSAControlPlane
                name: "{{ test_cluster_name }}"
                namespace: "{{ capi_namespace }}"
                wait: true
                wait_condition:
                  type: Ready
                  status: "True"
                wait_timeout: 600  # 10 minutes for testing
              register: controlplane_ready
              when: enable_cluster_creation_test | default(false)

            - name: Verify cluster creation progress
              debug:
                msg: "ROSAControlPlane creation initiated successfully with automated network"
              when: enable_cluster_creation_test | default(false)

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'Full Cluster Creation Test', 'status': 'passed', 'time': 600}] }}"
              when: enable_cluster_creation_test | default(false)

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'Full Cluster Creation Test', 'status': 'failed', 'time': 600, 'failure_message': 'Full cluster creation test failed'}] }}"
              when: enable_cluster_creation_test | default(false)

      when: enable_cluster_creation_test | default(false)

    - name: Test cleanup and resource deletion
      block:
        - name: Test 11 - Cleanup ROSANetwork and AWS resources
          block:
            - name: Delete test cluster (if created)
              kubernetes.core.k8s:
                state: absent
                src: "{{ output_dir }}/{{ test_cluster_name }}-cluster.yaml"
                wait: true
                wait_timeout: 300
              ignore_errors: true

            - name: Cleanup ROSANetwork and associated AWS resources
              include_tasks: tasks/cleanup_rosa_network.yml
              vars:
                cluster_name: "{{ test_cluster_name }}"

            - name: Record test success
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                passed_tests: "{{ passed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Cleanup', 'status': 'passed', 'time': 240}] }}"

          rescue:
            - name: Record test failure
              set_fact:
                total_tests: "{{ total_tests | int + 1 }}"
                failed_tests: "{{ failed_tests | int + 1 }}"
                test_results: "{{ test_results + [{'name': 'ROSANetwork Cleanup', 'status': 'failed', 'time': 240, 'failure_message': 'ROSANetwork cleanup failed'}] }}"

      when: enable_cleanup_test | default(true)

    - name: Calculate test results and duration
      set_fact:
        test_end_epoch: "{{ ansible_date_time.epoch | int }}"
        test_duration: "{{ (ansible_date_time.epoch | int) - (test_start_epoch | int) }}"
        test_success_rate: "{{ (passed_tests | int * 100 / total_tests | int) | round(1) if total_tests | int > 0 else 0 }}"

    - name: Display comprehensive test results
      debug:
        msg: |
          ACM-21174 ROSANetwork Testing Results
          =====================================

          Test Summary:
          - Total Tests: {{ total_tests }}
          - Passed: {{ passed_tests }}
          - Failed: {{ failed_tests }}
          - Success Rate: {{ test_success_rate }}%
          - Duration: {{ test_duration }} seconds

          Test Details:
          {% for test in test_results %}
          {{ loop.index }}. {{ test.name }}: {{ test.status | upper }}
             Time: {{ test.time }}s
             {% if test.failure_message is defined %}
             Error: {{ test.failure_message }}
             {% endif %}
          {% endfor %}

          Overall Result: {{ 'SUCCESS' if failed_tests | int == 0 else 'PARTIAL FAILURE' if passed_tests | int > 0 else 'FAILURE' }}

          Test Environment:
          - Test Case: {{ test_case }}
          - Test Cluster: {{ test_cluster_name }}
          - OpenShift Version: {{ openshift_version }}
          - AWS Region: {{ aws_region }}

    - name: Create detailed test report
      copy:
        content: |
          ACM-21174 ROSANetwork Testing Report
          ====================================

          Executive Summary:
          - Test Case: {{ test_case }}
          - Test Description: {{ test_description }}
          - Test Start: {{ test_start_time }}
          - Test End: {{ ansible_date_time.iso8601 }}
          - Duration: {{ test_duration }} seconds
          - Overall Result: {{ 'SUCCESS' if failed_tests | int == 0 else 'PARTIAL FAILURE' if passed_tests | int > 0 else 'FAILURE' }}

          Test Statistics:
          - Total Tests Executed: {{ total_tests }}
          - Tests Passed: {{ passed_tests }}
          - Tests Failed: {{ failed_tests }}
          - Success Rate: {{ test_success_rate }}%

          Test Environment:
          - Test Cluster Name: {{ test_cluster_name }}
          - OpenShift Version: {{ openshift_version }}
          - AWS Region: {{ aws_region }}
          - Network CIDR: {{ rosa_network_config.cidr_block }}
          - Availability Zones: {{ rosa_network_config.availability_zones | join(', ') }}

          Detailed Test Results:
          {% for test in test_results %}
          Test {{ loop.index }}: {{ test.name }}
          - Status: {{ test.status | upper }}
          - Duration: {{ test.time }} seconds
          {% if test.failure_message is defined %}
          - Failure Reason: {{ test.failure_message }}
          {% endif %}
          - Result: {{ 'PASS' if test.status == 'passed' else 'FAIL' }}

          {% endfor %}

          Key Findings:
          {% if failed_tests | int == 0 %}
          - All ROSANetwork functionality tests passed successfully
          - AWS VPC and subnet creation working correctly
          - Automated network approach is fully functional for ACM-21174
          {% else %}
          - {{ failed_tests }} out of {{ total_tests }} tests failed
          - Investigation required for failed test cases
          - See individual test failure messages above for details
          {% endif %}

          Recommendations:
          {% if failed_tests | int == 0 %}
          - ROSANetwork is ready for production use
          - Automated VPC creation eliminates manual network setup requirements
          - Consider integrating into standard ROSA HCP cluster creation workflows
          {% else %}
          - Address failed test cases before production deployment
          - Review CAPA controller logs for additional error details
          - Verify AWS permissions and network connectivity
          {% endif %}

          Artifacts Generated:
          - Test results XML: {{ output_dir }}/acm21174-test-results.xml
          - Test report: {{ output_dir }}/acm21174-test-report.txt
          - ROSANetwork templates: {{ output_dir }}/{{ test_cluster_name }}-*.yaml
        dest: "{{ output_dir }}/acm21174-test-report.txt"
        mode: '0644'

    - name: Generate test results XML for CI/CD integration
      template:
        src: "{{ common_template_path }}/results.xml.j2"
        dest: "{{ output_dir }}/acm21174-test-results.xml"
        mode: '0644'
      vars:
        test_suite_name: "ACM-21174 ROSANetwork Testing"
        test_cases: "{{ test_results }}"

    - name: Set final test facts
      set_fact:
        acm21174_test_complete: true
        acm21174_test_successful: "{{ failed_tests | int == 0 }}"
        acm21174_test_summary: {
          'total_tests': "{{ total_tests }}",
          'passed_tests': "{{ passed_tests }}",
          'failed_tests': "{{ failed_tests }}",
          'success_rate': "{{ test_success_rate }}",
          'duration': "{{ test_duration }}",
          'test_cluster': "{{ test_cluster_name }}"
        }

    - name: Display final test status
      debug:
        msg: |
          ================================================================
          ACM-21174 ROSANetwork Testing {{ 'COMPLETED SUCCESSFULLY' if acm21174_test_successful else 'COMPLETED WITH FAILURES' }}
          ================================================================

          {% if acm21174_test_successful %}
          🎉 All tests passed! ROSANetwork functionality is working correctly.

          Key Achievements:
          ✓ ROSANetwork creation and management
          ✓ AWS VPC and subnet automated creation
          ✓ Multi-AZ network architecture automation
          ✓ Network resource validation and verification
          ✓ Cleanup and lifecycle management
          ✓ ROSA cluster integration with network automation

          The ACM-21174 feature is ready for production use!
          {% else %}
          ⚠️  Some tests failed. Manual investigation required.

          Failed Tests: {{ failed_tests }}/{{ total_tests }}
          Please review the test report and logs for specific failure details.
          {% endif %}

          Test Artifacts:
          - Detailed Report: {{ output_dir }}/acm21174-test-report.txt
          - XML Results: {{ output_dir }}/acm21174-test-results.xml
          - Templates: {{ output_dir }}/{{ test_cluster_name }}-*.yaml

  handlers:
    - name: Emergency cleanup on critical failure
      include_tasks: tasks/cleanup_rosa_network.yml
      vars:
        cluster_name: "{{ test_cluster_name }}"
        force_rosa_network_cleanup: true
      when:
        - emergency_cleanup | default(false)
        - test_cluster_name is defined