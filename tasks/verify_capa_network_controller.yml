---
# Verify CAPA controller is ready for ROSANetwork operations
- name: Verify CAPA controller is ready for ROSANetwork operations
  block:
    - name: Check CAPA controller deployment status
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: capa-controller-manager
        namespace: capa-system
      register: capa_deployment

    - name: Verify CAPA deployment is ready
      assert:
        that:
          - capa_deployment.resources | length > 0
          - capa_deployment.resources[0].status.readyReplicas is defined
          - capa_deployment.resources[0].status.readyReplicas > 0
          - capa_deployment.resources[0].status.readyReplicas == capa_deployment.resources[0].spec.replicas
        fail_msg: "CAPA controller deployment is not ready"
        success_msg: "CAPA controller deployment is ready"

    - name: Get CAPA controller pods
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: capa-system
        label_selectors:
          - control-plane=capa-controller-manager
      register: capa_pods

    - name: Verify CAPA controller pods are running
      assert:
        that:
          - capa_pods.resources | length > 0
          - capa_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 0
        fail_msg: "No CAPA controller pods are running"
        success_msg: "CAPA controller pods are running"

    - name: Check CAPA controller image version
      debug:
        msg: "CAPA controller running image: {{ capa_deployment.resources[0].spec.template.spec.containers[0].image }}"

    - name: Verify correct Milan's network image is running
      assert:
        that:
          - capa_deployment.resources[0].spec.template.spec.containers[0].image == capa_controller_network.image + ":" + capa_controller_network.tag
        fail_msg: "CAPA controller is not running the expected Milan's network image"
        success_msg: "CAPA controller is running the correct Milan's network image"

    - name: Check environment variables for ROSANetwork features
      block:
        - name: Extract container environment variables
          set_fact:
            container_env: "{{ capa_deployment.resources[0].spec.template.spec.containers[0].env | default([]) }}"

        - name: Check for ROSA feature flags
          set_fact:
            has_exp_rosa: "{{ container_env | selectattr('name', 'equalto', 'EXP_ROSA') | selectattr('value', 'equalto', 'true') | list | length > 0 }}"
            has_exp_machine_pool: "{{ container_env | selectattr('name', 'equalto', 'EXP_MACHINE_POOL') | selectattr('value', 'equalto', 'true') | list | length > 0 }}"

        - name: Display feature flag status
          debug:
            msg:
              - "ROSA Feature Flags:"
              - "- EXP_ROSA: {{ has_exp_rosa }}"
              - "- EXP_MACHINE_POOL: {{ has_exp_machine_pool }}"

        - name: Validate required feature flags
          assert:
            that:
              - has_exp_rosa
              - has_exp_machine_pool
            fail_msg: "Required ROSA feature flags are not enabled"
            success_msg: "Required ROSA feature flags are enabled"

    - name: Check CAPA controller logs for ROSANetwork support
      command: kubectl logs -n capa-system deployment/capa-controller-manager --tail=50
      register: controller_logs

    - name: Display recent controller logs
      debug:
        msg: "Recent CAPA controller logs: {{ controller_logs.stdout_lines[-15:] }}"

    - name: Check for error messages in logs
      block:
        - name: Check for critical errors
          set_fact:
            has_critical_errors: "{{ 'panic' in controller_logs.stdout.lower() or 'fatal' in controller_logs.stdout.lower() }}"
            has_network_errors: "{{ 'rosanetwork' in controller_logs.stdout.lower() and 'error' in controller_logs.stdout.lower() }}"

        - name: Display error check results
          debug:
            msg:
              - "Log Analysis:"
              - "- Critical errors: {{ has_critical_errors }}"
              - "- Network-related errors: {{ has_network_errors }}"

        - name: Fail if critical errors found
          fail:
            msg: "CAPA controller logs contain critical errors"
          when: has_critical_errors

    - name: Verify CAPA manager ClusterRole has ROSANetwork permissions
      kubernetes.core.k8s_info:
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        name: capa-manager-role
      register: manager_clusterrole

    - name: Check ROSANetwork permissions in ClusterRole
      set_fact:
        has_required_permissions: >-
          {{
            manager_clusterrole.resources[0].rules |
            selectattr('apiGroups', 'defined') |
            selectattr('apiGroups', 'contains', 'infrastructure.cluster.x-k8s.io') |
            selectattr('resources', 'defined') |
            selectattr('resources', 'contains', 'rosanetworks') |
            list | length > 0
          }}

    - name: Verify ROSANetwork permissions are present
      assert:
        that: has_required_permissions
        fail_msg: "CAPA manager ClusterRole does not have ROSANetwork permissions"
        success_msg: "CAPA manager ClusterRole has required ROSANetwork permissions"

    - name: Test CAPA controller API access to ROSANetwork
      kubernetes.core.k8s_info:
        api_version: infrastructure.cluster.x-k8s.io/v1beta2
        kind: ROSANetwork
        namespace: "{{ capi_namespace }}"
      register: rosanetwork_access
      ignore_errors: true

    - name: Verify API access
      debug:
        msg: "CAPA controller can access ROSANetwork API: {{ 'Yes' if rosanetwork_access.failed == false else 'No' }}"

    - name: Check ROSANetwork CRD installation
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: rosanetworks.infrastructure.cluster.x-k8s.io
      register: rosanetwork_crd

    - name: Verify ROSANetwork CRD is installed
      assert:
        that:
          - rosanetwork_crd.resources | length > 0
          - rosanetwork_crd.resources[0].status.conditions | selectattr('type', 'equalto', 'Established') | selectattr('status', 'equalto', 'True') | list | length > 0
        fail_msg: "ROSANetwork CRD is not properly installed"
        success_msg: "ROSANetwork CRD is properly installed and established"

    - name: Check ROSAControlPlane CRD with network support
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: rosacontrolplanes.controlplane.cluster.x-k8s.io
      register: rosacontrolplane_crd

    - name: Verify ROSAControlPlane CRD has network reference support
      block:
        - name: Check CRD schema for rosaNetworkRef field
          set_fact:
            crd_schema: "{{ rosacontrolplane_crd.resources[0].spec.versions[0].schema.openAPIV3Schema }}"

        - name: Look for rosaNetworkRef in schema
          set_fact:
            has_network_ref: "{{ 'rosaNetworkRef' in crd_schema | string }}"

        - name: Display network reference support
          debug:
            msg: "ROSAControlPlane CRD has rosaNetworkRef support: {{ has_network_ref }}"

      when: rosacontrolplane_crd.resources | length > 0

    - name: Test controller responsiveness
      block:
        - name: Create test namespace for controller verification
          kubernetes.core.k8s:
            api_version: v1
            kind: Namespace
            name: capa-controller-test
            state: present

        - name: Clean up test namespace
          kubernetes.core.k8s:
            api_version: v1
            kind: Namespace
            name: capa-controller-test
            state: absent

        - name: Controller responsiveness test passed
          debug:
            msg: "✓ CAPA controller is responsive to API operations"

    - name: Final CAPA network controller verification
      debug:
        msg:
          - "✓ CAPA Network Controller Verification Summary:"
          - "✓ CAPA controller deployment is ready"
          - "✓ CAPA controller pods are running"
          - "✓ Correct Milan's network image is deployed: {{ capa_controller_network.image }}:{{ capa_controller_network.tag }}"
          - "✓ Required ROSA feature flags are enabled"
          - "✓ ROSANetwork permissions are configured"
          - "✓ ROSANetwork CRD is properly installed"
          - "✓ ROSAControlPlane CRD supports network references"
          - "✓ Controller API access is working"
          - "✓ No critical errors in controller logs"
          - "✓ CAPA controller is ready for ACM-21174 ROSANetwork testing"

    - name: Set controller verification success fact
      set_fact:
        capa_network_controller_verified: true

  rescue:
    - name: Handle CAPA network controller verification failure
      debug:
        msg: "CAPA network controller verification failed: {{ ansible_failed_result.msg | default('Unknown error') }}"

    - name: Get detailed CAPA controller information for debugging
      block:
        - name: Get CAPA deployment details
          command: kubectl describe deployment capa-controller-manager -n capa-system
          register: deployment_details
          ignore_errors: true

        - name: Get CAPA pod details
          command: kubectl describe pods -l control-plane=capa-controller-manager -n capa-system
          register: pod_details
          ignore_errors: true

        - name: Get CAPA controller logs
          command: kubectl logs -n capa-system deployment/capa-controller-manager --tail=100
          register: full_logs
          ignore_errors: true

        - name: Get CRD status
          command: kubectl get crd rosanetworks.infrastructure.cluster.x-k8s.io rosacontrolplanes.controlplane.cluster.x-k8s.io
          register: crd_status
          ignore_errors: true

        - name: Display debugging information
          debug:
            msg:
              - "=== DEBUGGING INFORMATION ==="
              - "Deployment status: {{ deployment_details.stdout if deployment_details.rc == 0 else 'Failed to get' }}"
              - "Pod status: {{ pod_details.stdout if pod_details.rc == 0 else 'Failed to get' }}"
              - "Controller logs: {{ full_logs.stdout if full_logs.rc == 0 else 'Failed to get' }}"
              - "CRD status: {{ crd_status.stdout if crd_status.rc == 0 else 'Failed to get' }}"

    - name: Set controller verification failure fact
      set_fact:
        capa_network_controller_verified: false

    - name: Provide troubleshooting guidance
      debug:
        msg:
          - "CAPA Network Controller Troubleshooting:"
          - "1. Check deployment status:"
          - "   kubectl get deployment capa-controller-manager -n capa-system"
          - "2. Check pod status and events:"
          - "   kubectl get events -n capa-system --sort-by='.lastTimestamp'"
          - "3. Verify image availability:"
          - "   docker pull {{ capa_controller_network.image }}:{{ capa_controller_network.tag }}"
          - "4. Check CRD installation:"
          - "   kubectl get crd | grep rosa"
          - "5. Verify ClusterRole permissions:"
          - "   kubectl describe clusterrole capa-manager-role"
          - "6. Check controller logs for specific errors:"
          - "   kubectl logs deployment/capa-controller-manager -n capa-system"

    - name: Fail the verification
      fail:
        msg: "CAPA network controller verification failed - environment not ready for ACM-21174 testing"