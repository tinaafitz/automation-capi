- name: Get cluster-api deployment
  shell: |
    oc --context='{{ ocp_context }}' get deploy -n multicluster-engine -ojson |\
    jq -c '.items[] | select(.metadata.name | contains("capi-controller-manager")) | {name: .metadata.name, creationTimestamp: .metadata.creationTimestamp}'
  register: capi_controller_manager
  failed_when: false
  changed_when: false

- name: Check for capi-controller-manager
  debug:
    msg: "✓ capi-controller-manager deployment found - {{ capi_controller_manager.stdout }}"
  when: capi_controller_manager.stdout | length > 0

- name: Warn if capi-controller-manager not found
  debug:
    msg: "⚠ capi-controller-manager deployment not found (may still be deploying)"
  when: not capi_controller_manager.stdout | length > 0

- name: Check for cluster-api-provider-aws deployment
  shell: |
    oc --context='{{ ocp_context }}' get deploy -n multicluster-engine -ojson |\
    jq -c '.items[] | select(.metadata.name | contains("capa-controller-manager")) | {name: .metadata.name, creationTimestamp: .metadata.creationTimestamp}'
  register: capa_controller_manager
  failed_when: false
  changed_when: false

- name: Check for capa-controller-manager
  debug:
    msg: "✓ capa-controller-manager deployment found - {{ capa_controller_manager.stdout }}"
  when: capa_controller_manager.stdout | length > 0

- name: Warn if capa-controller-manager not found
  debug:
    msg: "⚠ capa-controller-manager deployment not found (may still be deploying)"
  when: not capa_controller_manager.stdout | length > 0

- name: Get registrationConfiguration
  shell: |
    oc --context='{{ ocp_context }}' get clusterManager -n multicluster-engine -ojson |\
    jq -c '.items[] | select(.spec.registrationConfiguration) | {name: "ClusterManager", creationTimestamp: .metadata.creationTimestamp}'
  register: registration_configuration_applied
  failed_when: false
  changed_when: false

- name: Check for registration configuration
  debug:
    msg: "✓ ClusterManager registration configuration found - {{ registration_configuration_applied.stdout }}"
  when: registration_configuration_applied.stdout | length > 0

- name: Warn if registration configuration not found
  debug:
    msg: "❌ ClusterManager registration configuration not found"
  when: not registration_configuration_applied.stdout | length > 0

- name: Get clusterrolebinding
  shell: |
    oc --context='{{ ocp_context }}' get ClusterRoleBinding cluster-manager-registration-capi -ojson | jq -c '{name: .metadata.name, creationTimestamp: .metadata.creationTimestamp}'
  register: cluster_role_binding_applied
  failed_when: false
  changed_when: false

- name: Check for cluster-role-binding
  debug:
    msg: "✓ ClusterRoleBinding cluster-manager-registration-capi found - {{ cluster_role_binding_applied.stdout }}"
  when: cluster_role_binding_applied.stdout | length > 0

- name: Warn if cluster-role-binding not found
  debug:
    msg: "❌ ClusterRoleBinding cluster-manager-registration-capi not found"
  when: not cluster_role_binding_applied.stdout | length > 0

- name: Get capa-manager-bootstrap-credentials
  shell: |
    oc --context='{{ ocp_context }}' get secret -n multicluster-engine capa-manager-bootstrap-credentials -ojson | jq -c '{name: .metadata.name, creationTimestamp: .metadata.creationTimestamp}'
  register: capa_manager_bootstrap_credentials_exists
  failed_when: false
  changed_when: false

- name: Check for capa-manager-bootstrap-credentials
  debug:
    msg: "✓ Secret capa-manager-bootstrap-credentials found - {{ capa_manager_bootstrap_credentials_exists.stdout }}"
  when: capa_manager_bootstrap_credentials_exists.stdout | length > 0

- name: Warn if capa-manager-bootstrap-credentials not found
  debug:
    msg: "❌ Secret capa-manager-bootstrap-credentials not found"
  when: not capa_manager_bootstrap_credentials_exists.stdout | length > 0

- name: Get rosa-creds-secret
  shell: |
    oc --context='{{ ocp_context }}' get secret -n multicluster-engine rosa-creds-secret -ojson | jq -c '{name: .metadata.name, creationTimestamp: .metadata.creationTimestamp}'
  register: rosa_creds_secret_exists
  failed_when: false
  changed_when: false

- name: Check for rosa-creds-secret
  debug:
    msg: "✓ Secret rosa-creds-secret found - {{ rosa_creds_secret_exists.stdout }}"
  when: rosa_creds_secret_exists.stdout | length > 0

- name: Warn if rosa-creds-secret not found
  debug:
    msg: "❌ Secret rosa-creds-secret not found"
  when: not rosa_creds_secret_exists.stdout | length > 0

- name: Get AWSClusterControllerIdentity
  shell: |
    oc --context='{{ ocp_context }}' get AWSClusterControllerIdentity default -ojson | jq -c '{name: .metadata.name, creationTimestamp: .metadata.creationTimestamp}'
  register: aws_cluster_controller_identity_exists
  failed_when: false
  changed_when: false

- name: Check for AWSClusterControllerIdentity
  debug:
    msg: "✓ AWSClusterControllerIdentity default found - {{ aws_cluster_controller_identity_exists.stdout }}"
  when: aws_cluster_controller_identity_exists.stdout | length > 0

- name: Warn if AWSClusterControllerIdentity not found
  debug:
    msg: "❌ AWSClusterControllerIdentity default not found"
  when: not aws_cluster_controller_identity_exists.stdout | length > 0

- name: Get ROSA-related namespaces
  shell: |
    oc --context='{{ ocp_context }}' get namespace -ojson | jq -c '.items[] | select(.metadata.name | test("rosa|capi")) | {name: .metadata.name, creationTimestamp: .metadata.creationTimestamp}'
  register: rosa_namespaces
  failed_when: false
  changed_when: false

- name: Check for ROSA namespaces
  debug:
    msg: "✓ Namespace found - {{ item }}"
  loop: "{{ rosa_namespaces.stdout_lines }}"
  when: rosa_namespaces.stdout_lines | length > 0

- name: Get ROSA cluster resources (all namespaces)
  shell: |
    oc --context='{{ ocp_context }}' get rosacluster --all-namespaces -ojson | jq -c '.items[] | {namespace: .metadata.namespace, name: .metadata.name, creationTimestamp: .metadata.creationTimestamp, status: (if .metadata.deletionTimestamp != null then "Uninstalling" elif (.status.conditions[]? | select(.reason == "uninstalling" or .reason == "deleting")) then "Uninstalling" elif .status.ready == true then "Ready" elif (.status.conditions[] | select(.type == "Ready" or .type == "ROSAClusterReady") | .status) == "True" then "Ready" else "Provisioning" end)}'
  register: rosa_clusters
  failed_when: false
  changed_when: false

- name: Check for ROSA clusters
  debug:
    msg: "✓ ROSACluster found - {{ item }}"
  loop: "{{ rosa_clusters.stdout_lines }}"
  when: rosa_clusters.stdout_lines | length > 0

- name: Info if no ROSA clusters found
  debug:
    msg: "ℹ No ROSACluster resources found"
  when: rosa_clusters.stdout_lines | length == 0

- name: Get RosaControlPlane resources (all namespaces)
  shell: |
    oc --context='{{ ocp_context }}' get rosacontrolplane --all-namespaces -ojson | jq -c '.items[] | {namespace: .metadata.namespace, name: .metadata.name, creationTimestamp: .metadata.creationTimestamp, status: (if .metadata.deletionTimestamp != null then "Uninstalling" elif (.status.conditions[]? | select(.reason == "uninstalling" or .reason == "deleting")) then "Uninstalling" elif .status.ready == true then "Ready" elif (.status.conditions[] | select(.type == "ROSAControlPlaneReady") | .status) == "True" then "Ready" else "Provisioning" end)}'
  register: rosa_control_planes
  failed_when: false
  changed_when: false

- name: Check for RosaControlPlanes
  debug:
    msg: "✓ RosaControlPlane found - {{ item }}"
  loop: "{{ rosa_control_planes.stdout_lines }}"
  when: rosa_control_planes.stdout_lines | length > 0

- name: Info if no RosaControlPlanes found
  debug:
    msg: "ℹ No RosaControlPlane resources found"
  when: rosa_control_planes.stdout_lines | length == 0

- name: Get RosaNetwork resources (all namespaces)
  shell: |
    oc --context='{{ ocp_context }}' get rosanetwork --all-namespaces -ojson | jq -c '.items[] | {namespace: .metadata.namespace, name: .metadata.name, creationTimestamp: .metadata.creationTimestamp, status: (if .metadata.deletionTimestamp != null then "Deleting" elif (.status.conditions[]? | select(.reason == "uninstalling" or .reason == "deleting")) then "Deleting" elif (.status.conditions[] | select(.type == "Ready" or .type == "ROSANetworkReady") | .status) == "True" then "Ready" else "Configuring" end)}'
  register: rosa_networks
  failed_when: false
  changed_when: false

- name: Check for RosaNetworks
  debug:
    msg: "✓ RosaNetwork found - {{ item }}"
  loop: "{{ rosa_networks.stdout_lines }}"
  when: rosa_networks.stdout_lines | length > 0

- name: Info if no RosaNetworks found
  debug:
    msg: "ℹ No RosaNetwork resources found"
  when: rosa_networks.stdout_lines | length == 0
