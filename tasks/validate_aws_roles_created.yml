---
- name: "Validate AWS IAM roles were created by ROSARoleConfig"
  block:
    - name: Get ROSARoleConfig status with role ARNs
      kubernetes.core.k8s_info:
        api_version: infrastructure.cluster.x-k8s.io/v1beta2
        kind: ROSARoleConfig
        name: "{{ cluster_name }}-role-config"
        namespace: "{{ capi_namespace }}"
      register: role_config_status

    - name: Extract role ARNs from status
      set_fact:
        account_roles: "{{ role_config_status.resources[0].status.accountRoleARNs | default({}) }}"
        operator_roles: "{{ role_config_status.resources[0].status.operatorRoleARNs | default({}) }}"
        cluster_prefix: "{{ role_config_status.resources[0].spec.accountRoleConfig.prefix }}"
      when: role_config_status.resources | length > 0

    - name: Display extracted role information
      debug:
        msg:
          - "Cluster prefix: {{ cluster_prefix }}"
          - "Account roles: {{ account_roles }}"
          - "Operator roles: {{ operator_roles }}"

    - name: Validate all account roles exist using ROSA CLI
      block:
        - name: List account roles with ROSA CLI
          command: rosa list account-roles --prefix {{ cluster_prefix }}
          register: rosa_account_roles
          failed_when: false

        - name: Display ROSA account roles output
          debug:
            var: rosa_account_roles.stdout

        - name: Verify account roles exist in ROSA
          assert:
            that:
              - rosa_account_roles.rc == 0
              - "'HCP-ROSA-Installer-Role' in rosa_account_roles.stdout"
              - "'HCP-ROSA-Support-Role' in rosa_account_roles.stdout"
              - "'HCP-ROSA-Worker-Role' in rosa_account_roles.stdout"
            fail_msg: "Required account roles not found with ROSA CLI"
            success_msg: "All required account roles verified with ROSA CLI"

    - name: Validate all operator roles exist using ROSA CLI
      block:
        - name: List operator roles with ROSA CLI
          command: rosa list operator-roles --prefix {{ cluster_prefix }}
          register: rosa_operator_roles
          failed_when: false

        - name: Display ROSA operator roles output
          debug:
            var: rosa_operator_roles.stdout

        - name: Verify operator roles exist in ROSA
          assert:
            that:
              - rosa_operator_roles.rc == 0
              - "'openshift-ingress-operator-cloud-credentials' in rosa_operator_roles.stdout"
              - "'openshift-image-registry-installer-cloud-credentials' in rosa_operator_roles.stdout"
              - "'openshift-cluster-csi-drivers-ebs-cloud-credentials' in rosa_operator_roles.stdout"
              - "'openshift-cloud-network-config-controller-cloud-credentials' in rosa_operator_roles.stdout"
            fail_msg: "Required operator roles not found with ROSA CLI"
            success_msg: "All required operator roles verified with ROSA CLI"

    - name: Validate role ARNs format and accessibility
      block:
        - name: Check account role ARN format
          assert:
            that:
              - account_roles.installer is match("arn:aws:iam::[0-9]+:role/.*HCP-ROSA-Installer-Role")
              - account_roles.support is match("arn:aws:iam::[0-9]+:role/.*HCP-ROSA-Support-Role")
              - account_roles.worker is match("arn:aws:iam::[0-9]+:role/.*HCP-ROSA-Worker-Role")
            fail_msg: "Account role ARNs have invalid format"
            success_msg: "Account role ARNs have correct format"
          when: account_roles | length > 0

        - name: Check operator role ARN format
          assert:
            that:
              - operator_roles.ingress is match("arn:aws:iam::[0-9]+:role/.*openshift-ingress-operator-cloud-credentials")
              - operator_roles.imageRegistry is match("arn:aws:iam::[0-9]+:role/.*openshift-image-registry-installer-cloud-credentials")
              - operator_roles.storage is match("arn:aws:iam::[0-9]+:role/.*openshift-cluster-csi-drivers-ebs-cloud-credentials")
              - operator_roles.network is match("arn:aws:iam::[0-9]+:role/.*openshift-cloud-network-config-controller-cloud-credentials")
            fail_msg: "Operator role ARNs have invalid format"
            success_msg: "Operator role ARNs have correct format"
          when: operator_roles | length > 0

    - name: Verify AWS role policies are attached (using AWS CLI if available)
      block:
        - name: Check if AWS CLI is available
          command: aws --version
          register: aws_cli_check
          failed_when: false

        - name: Get account role policies
          command: aws iam list-attached-role-policies --role-name {{ cluster_prefix }}-HCP-ROSA-Installer-Role
          register: installer_policies
          failed_when: false
          when: aws_cli_check.rc == 0

        - name: Verify installer role has required policies
          assert:
            that:
              - installer_policies.rc == 0
              - "'HCP-ROSA-Installer-Role-Policy' in installer_policies.stdout or 'RosaInstaller' in installer_policies.stdout"
            fail_msg: "Installer role missing required policies"
            success_msg: "Installer role has required policies attached"
          when: aws_cli_check.rc == 0

      rescue:
        - name: AWS CLI validation skipped
          debug:
            msg: "AWS CLI not available or failed - skipping detailed policy validation"

    - name: Final validation summary
      debug:
        msg:
          - "✓ ROSARoleConfig successfully created AWS IAM roles"
          - "✓ Account roles verified with ROSA CLI"
          - "✓ Operator roles verified with ROSA CLI"
          - "✓ Role ARNs have correct format"
          - "✓ AWS role validation completed successfully"

  rescue:
    - name: Handle AWS role validation failure
      debug:
        msg: "AWS role validation failed: {{ ansible_failed_result.msg }}"

    - name: Get debugging information
      block:
        - name: Check ROSARoleConfig current status
          kubernetes.core.k8s_info:
            api_version: infrastructure.cluster.x-k8s.io/v1beta2
            kind: ROSARoleConfig
            name: "{{ cluster_name }}-role-config"
            namespace: "{{ capi_namespace }}"
          register: debug_role_config

        - name: Display ROSARoleConfig for debugging
          debug:
            var: debug_role_config.resources[0]
          when: debug_role_config.resources | length > 0

        - name: Try ROSA CLI for debugging
          command: rosa list account-roles
          register: debug_account_roles
          ignore_errors: true

        - name: Display all account roles for debugging
          debug:
            var: debug_account_roles.stdout
          when: debug_account_roles is defined

    - name: Fail the validation
      fail:
        msg: "AWS IAM role validation failed"